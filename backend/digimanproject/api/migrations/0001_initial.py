# Generated by Django 5.2.7 on 2025-10-30 10:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('reader', 'Reader')], default='reader', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('suspended', 'Suspended'), ('deactivated', 'Deactivated')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('scheduled_at', models.DateTimeField(blank=True, null=True)),
                ('expired_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('scheduled', 'Scheduled'), ('expired', 'Expired'), ('hidden', 'Hidden')], default='active', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('chapter_number', models.IntegerField()),
                ('upload_date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='FlaggedContent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('severity_score', models.FloatField(default=0.0)),
                ('reason', models.TextField()),
                ('flagged_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_resolved', models.BooleanField(default=False)),
                ('is_content_image', models.BooleanField(default=False)),
                ('content', models.TextField()),
                ('target_content_type', models.CharField(choices=[('manga_title', 'MangaTitle'), ('chapter', 'Chapter'), ('page', 'Page'), ('comment', 'Comment'), ('user', 'User')], max_length=20)),
                ('target_content_id', models.UUIDField()),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Reader',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('display_name', models.CharField(blank=True, max_length=100)),
                ('avatar', models.URLField(blank=True)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('api.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='LogEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action_type', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('create', 'Create'), ('update', 'Update'), ('delete', 'Delete')], max_length=50)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('target_object_type', models.CharField(choices=[('manga_title', 'MangaTitle'), ('chapter', 'Chapter'), ('page', 'Page'), ('genre', 'Genre'), ('author', 'Author'), ('comment', 'Comment'), ('user', 'User'), ('report', 'Report'), ('flagged_content', 'FlaggedContent'), ('announcement', 'Announcement'), ('penalty', 'Penalty')], max_length=20)),
                ('target_object_id', models.UUIDField()),
                ('is_moderated', models.BooleanField(default=False)),
                ('details', models.JSONField(default=dict)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='log_entries', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MangaTitle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('cover_image', models.URLField(blank=True)),
                ('publication_status', models.CharField(choices=[('ongoing', 'Ongoing'), ('finished', 'Finished'), ('dropped', 'Dropped')], default='ongoing', max_length=30)),
                ('publication_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_visible', models.BooleanField(default=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.author')),
                ('genres', models.ManyToManyField(related_name='manga_titles', to='api.genre')),
                ('preview_chapter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.chapter')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_image', models.BooleanField(default=False)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('active', 'Active'), ('deleted', 'Deleted'), ('hidden', 'Hidden')], default='active', max_length=20)),
                ('hidden_reasons', models.TextField(blank=True)),
                ('chapter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.chapter')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.comment')),
                ('manga_title', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.mangatitle')),
            ],
        ),
        migrations.AddField(
            model_name='chapter',
            name='manga_title',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='api.mangatitle'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('library_update', 'Library Update'), ('comment_mention', 'Comment Mention'), ('announcement', 'Announcement'), ('report_related', 'Report Related')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('related_object_type', models.CharField(choices=[('manga_title', 'MangaTitle'), ('chapter', 'Chapter'), ('comment', 'Comment'), ('report', 'Report'), ('announcement', 'Announcement')], max_length=20)),
                ('related_object_id', models.UUIDField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Penalty',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.TextField()),
                ('duration_days', models.IntegerField(default=0)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='penalty', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('category', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed')], default='pending', max_length=20)),
                ('admin_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('target_content_type', models.CharField(choices=[('manga_title', 'MangaTitle'), ('chapter', 'Chapter'), ('comment', 'Comment'), ('user', 'User')], max_length=50)),
                ('target_content_id', models.UUIDField()),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Administrator',
            fields=[
                ('reader_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.reader')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('api.reader',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ReadingProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('last_read_timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('chapter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.chapter')),
                ('reader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reading_progress', to='api.reader')),
            ],
        ),
        migrations.CreateModel(
            name='ReaderPreferences',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('theme_mode', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark')], default='light', max_length=20)),
                ('page_display_style', models.CharField(choices=[('single-page', 'Single-Page'), ('double-page', 'Double-Page'), ('long_strip', 'Long Strip'), ('wide_strip', 'Wide Strip')], default='single-page', max_length=20)),
                ('reading_direction', models.CharField(choices=[('left_to_right', 'Left to Right'), ('right_to_left', 'Right to Left')], default='left_to_right', max_length=20)),
                ('image_size_mode', models.CharField(choices=[('fit_width', 'Fit Width'), ('fit_height', 'Fit Height'), ('fit_both', 'Fit Both')], default='fit_both', max_length=20)),
                ('is_progress_bar_visible', models.BooleanField(default=True)),
                ('reader', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to='api.reader')),
            ],
        ),
        migrations.CreateModel(
            name='OfflineChapter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('storage_path', models.CharField(max_length=255)),
                ('size_mb', models.FloatField()),
                ('download_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.chapter')),
                ('reader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offline_chapters', to='api.reader')),
            ],
        ),
        migrations.CreateModel(
            name='LibraryList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('built-in', 'Built-in')], default='private', max_length=10)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('manga_titles', models.ManyToManyField(related_name='library_lists', to='api.mangatitle')),
                ('reader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='library_lists', to='api.reader')),
            ],
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('page_number', models.IntegerField()),
                ('image_url', models.URLField()),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='api.chapter')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('chapter', 'page_number'), name='unique_page_per_chapter')],
            },
        ),
    ]
